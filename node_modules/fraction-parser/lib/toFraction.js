"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var numberLookupMap_1 = __importDefault(require("./helpers/numberLookupMap"));
var getClosestLookupNumber_1 = __importDefault(require("./helpers/getClosestLookupNumber"));
// functions that returns a string representation of a fraction from a number
var toFraction = function (decimal, _a) {
    var _b = _a.useUnicodeVulgar, useUnicodeVulgar = _b === void 0 ? true : _b;
    // if the number is a whole number, return it as a string
    if (decimal % 1 === 0) {
        return decimal.toString();
    }
    var decimalPortion = (decimal - Math.floor(decimal)).toFixed(2);
    var numberPortion = Math.trunc(decimal);
    numberPortion = numberPortion === 0 ? '' : "".concat(numberPortion, " ");
    // if the number is a decimal, return it as a fraction
    if (useUnicodeVulgar) {
        return "".concat(numberPortion).concat(numberLookupMap_1.default[(0, getClosestLookupNumber_1.default)(decimalPortion)].vulgar);
    }
    return "".concat(numberPortion).concat(numberLookupMap_1.default[(0, getClosestLookupNumber_1.default)(decimalPortion)].fraction);
};
exports.default = toFraction;
